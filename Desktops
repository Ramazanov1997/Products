import { useState } from "react"
import products_store from "../../../store/products_store"

const DekstoFilter = () => {
    const [selectedCategories, setSelectedCategories] = useState([])
    const [msiLaptops, setMsiLaptops] = useState(products_store.msi_dekstops)
    const [selectedSsd, setSelectedSsd] = useState([])
    const [selectedProcesser, setSelectedProcesser] = useState([])
    const [selectedProcesser_model, setSelectedProcesser_model] = useState([])
    const [selectedMotherboard, setSelectedMotherboard] = useState([])
    const [selectedRam, setSelectedRam] = useState([])
    const [selectedVideocard, setSelectedVideocard] = useState([])
    const [selectedBlock_power, setSelectedBlock_power] = useState([])
    const [selectedType_ram, setSelectedType_ram] = useState([])
    const handleCheckboxChange = (category, value, setSelectedCategories) => {
        if (selectedCategories.includes(value)) {
            setSelectedCategories(selectedCategories.filter((c) => c !== value))
        } else {
            setSelectedCategories([...selectedCategories, value])
        }
    }

    products_store.filteredProductsArr = msiLaptops.filter((item) => {
        const isSelectedSsd = selectedSsd.length == 0 || selectedSsd.includes(item.characteristic.ssd)
        const isSelectedProcesser = selectedProcesser.length == 0 || selectedProcesser.includes(item.characteristic.processer)
        const isSelectedProcesser_model = selectedProcesser_model.length == 0 || selectedProcesser_model.includes(item.characteristic.processer_model)
        const isSelectedMotherboard = selectedMotherboard.length == 0 || selectedMotherboard.includes(item.characteristic.Motherboard)
        const isSelectedRam = selectedRam.length == 0 || selecteRam.includes(item.characteristic.Ram)
        const isSelectedVideocard = selectedVideocard.length == 0 || selectedVideocard.includes(item.characteristic.Videocard)
        const isSelectedBlock_power = selectedBlock_power.length == 0 || selectedBlock_power.includes(item.characteristic.Block_power)
        const isSelectedType_ram = selectedType_ram.length == 0 || selectedType_ram.includes(item.characteristic.Type_ram)
        return isSelectedSsd && isSelectedProcesser && isSelectedProcesser_model && isSelectedMotherboard && isSelectedRam && isSelectedVideocard && isSelectedBlock_power && isSelectedType_ram
    })

    return (
        <div>
                    <h2>Product</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Product))).map((Product) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Product}
                            checked={selectedProduct.includes(Product)}
                            onChange={() => handleCheckboxChange('Product', Product, setSelectedProduct)} />
                        {Product} 

                    </li>
                </ul>
                </label>
            ))}
            <h2>Ssd</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.ssd))).map((ssd) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={ssd}
                            checked={selectedSsd.includes(ssd)}
                            onChange={() => handleCheckboxChange('ssd', ssd, setSelectedSsd)} />
                        {ssd} GB

                    </li>
                </ul>
                </label>
            ))}
            <h2>Processer Model</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.processer_model))).map((processer) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={processer}
                            checked={selectedProcesser_model.includes(processer)}
                            onChange={() => handleCheckboxChange('processer', processer, setSelectedProcesser_model)}
                        />
                        {processer}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Processer Company</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.processer))).map((processer) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={processer}
                            checked={selectedProcesser.includes(processer)}
                            onChange={() => handleCheckboxChange('processer', processer, setSelectedProcesser)}
                        />
                        {processer}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Motherboard</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Motherboard))).map((Motherboard) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Motherboard}
                            checked={selectedProcesser.includes(Motherboard)}
                            onChange={() => handleCheckboxChange('Motherboard', Motherboard, setSelectedMotherboard)}
                        />
                        {Motherboard}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Ram</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Ram))).map((Ram) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Ram}
                            checked={selectedRam.includes(Ram)}
                            onChange={() => handleCheckboxChange('Ram', Ram, setSelectedRam)}
                        />
                        {processer}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Videocard</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Videocard))).map((Videocard) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Videocard}
                            checked={selectedVideocard.includes(Videocard)}
                            onChange={() => handleCheckboxChange('Videocard', Videocard, setSelectedVideocard)}
                        />
                        {Videocard}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Block_power</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Block_power))).map((Block_power) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Block_power}
                            checked={selectedBlock_power.includes(Block_power)}
                            onChange={() => handleCheckboxChange('Block_power', Block_power, setSelectedBlock_power)}
                        />
                        {Block_power}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Type_ram</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Type_ram))).map((Type_ram) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Type_ram}
                            checked={selectedType_ram.includes(Type_ram)}
                            onChange={() => handleCheckboxChange('Type_ram', Type_ram, setSelectedType_ram)}
                        />
                        {Type_ram}
                    </li>
                </ul>

                </label>
            ))}

            {/* {filteredLaptops.map((laptop) => <div>
                <li key={laptop.id}>
                    <div>{laptop.name}</div>
                    <img src={laptop.image} alt={laptop.name} style={{ width: '100px', height: '100px' }} />
                </li>

            </div>)} */}
        </div>
    )
}
export default DekstoFilter
