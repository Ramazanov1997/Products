import { useState } from "react"
import products_store from "../../../store/products_store"

const Laptops = () => {
    const [selectedCategories, setSelectedCategories] = useState([])
    const [msiLaptops, setMsiLaptops] = useState(products_store.msi_laptops)
    const [selectedSsd, setSelectedSsd] = useState([])
    const [selectedProcesser, setSelectedProcesser] = useState([])
    const [selectedProcesser_model, setSelectedProcesser_model] = useState([])
    const [selectedRam,setSelectedRam] = useState([])
    const [selectedDisplay,setSelectedDisplay] = useState([])
    const [selectedDisplay_hz,setSelectedDisplay_hz] = useState([])
    const [selectedVideocard,setSelectedVideocard] = useState([]) 

    const [activeCollapsProduct, setActiveCollapsProduct] = useState(false);
    const [activeCollapsSsd, setActiveCollapsSsd] = useState(false);
    const [activeCollapsProcesser, setActiveCollapsProcesser] = useState(false);
    const [activeCollapsProcesser_model, setActiveCollapsProcesser_model] = useState(false)
    const [activeCollapsRam, setActiveCollapsRam] = useState(false)
    const [activeCollapsDisplay, setActiveCollapsDisplay] = useState(false)
    const [activeCollapsDisplay_hz, setActiveCollapsDisplay_hz] = useState(false)
    const [activeCollapsVideocard, setActiveCollapsVideocard] = useState(false)

    const handleCheckboxChange = (category, value, setSelectedCategories) => {
        if (selectedCategories.includes(value)) {
            setSelectedCategories(selectedCategori
                es.filter((c) => c !== value))
        } else {
            setSelectedCategories([...selectedCategories, value])
        }
    }
rrrrrrr
    products_store.filteredProductsArr = msiLaptops.filter((item) => {
        const isSelectedSsd = selectedSsd.length == 0 || selectedSsd.includes(item.characteristic.ssd)
        const isSelectedProcesser = selectedProcesser.length == 0 || selectedProcesser.includes(item.characteristic.processer)
        const isSelectedProcesser_model = selectedProcesser_model.length == 0 || selectedProcesser_model.includes(item.characteristic.processer_model)
        const isSelectedRam = selectedRam.length == 0 || selectedRam.includes(item.characteristic.ram)
        const isSelectedDisplay = selectedDisplay.length == 0 || selectedDisplay.includes(item.characteristic.Display)
        const isSelectedDisplay_hz = selectedDisplay_hz.length == 0 || selectedDisplay_hz.includes(item.characteristic.Display_hz)
        const isSelectedVideocard = selectedVideocard.length == 0 || selectedVideocard.includes(item.characteristic.Videocard)


        return isSelectedSsd && isSelectedProcesser && isSelectedProcesser_model && isSelectedRam && isSelectedDisplay && isSelectedDisplay_hz && isSelectedVideocard
    })

    return (
    <div>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsProduct ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsProduct(!activeCollapsProduct)}><h2>Product</h2><img src={activeCollapsProduct ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsProduct ? "content activeContent" : "content"}>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Product))).map((Product) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Product}
                            checked={selectedProduct.includes(Product)}
                            onChange={() => handleCheckboxChange('Product', Product, setSelectedProduct)} />
                        {product} 

                    </li>
                </ul>
                </label>
            ))}
            <h2>Product</h2>
        </div>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsSsd ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsSsd(!activeCollapsSsd)}><h2>Ssd</h2><img src={activeCollapsSsd ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsSsd ? "content activeContent" : "content"}>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Ssd))).map((Ssd) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Ssd}
                            checked={selectedSsd.includes(Ssd)}
                            onChange={() => handleCheckboxChange('ssd', ssd, setSelectedSsd)} />
                        {ssd} GB

                    </li>
                </ul>
                </label>
             
            ))}
            <h2>Ssd</h2>
        </div>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsProcesser_Model ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsProcesser_Model(!activeCollapsProcesser_Model)}><h2>Processer Model</h2><img src={activeCollapsProcesser_Model ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsProcesser_Model ? "content activeContent" : "content"}>
            <h2>Processer Model</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Processer_Model))).map((Processer_Model) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Processer_Model}
                            checked={selectedProcesser_model.includes(Processer_Model)}
                            onChange={() => handleCheckboxChange('Processer_Model', Processer_Model, setSelectedProcesser_model)}
                        />
                        {Processer_model}
                    </li>
                </ul>
                </label>
            ))}
            <h2>Processer Model</h2>
        </div>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsProcesser ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsProcesser(!activeCollapsProcesser)}><h2>Processer</h2><img src={activeCollapsProcesser ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsProcesser ? "content activeContent" : "content"}>
            <h2>Processer Company</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Processer))).map((Processer) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Processer}
                            checked={selectedProcesser.includes(Processer)}
                            onChange={() => handleCheckboxChange('Processer', Processer, setSelectedProcesser)}
                        />
                        {Processer}
                    </li>
                </ul>

                </label>
            ))}
        </div>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsRam ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsRam (!activeCollapsRam)}><h2>Ram</h2><img src={activeCollapsRam ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsRam ? "content activeContent" : "content"}>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Ram))).map((Ram) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Ram}
                            checked={selectedRam.includes(Ram)}
                            onChange={() => handleCheckboxChange('Ram', Ram, setSelectedRam)}
                        />
                        {Ram}
                    </li>
                </ul>
                </label>
            ))}
            <h2>Ram</h2>
        </div>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsDisplay ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsDisplay (!activeCollapsDisplay)}><h2>Display</h2><img src={activeCollapsDisplay ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsDisplay ? "content activeContent" : "content"}></div>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Display))).map((Display) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Display}
                            checked={selectedDisplay.includes(Display)}
                            onChange={() => handleCheckboxChange('Display', Display, setSelectedDisplay)}
                        />
                        {Display}
                    </li>
                </ul>
                </label>
            ))}
            <h2>Display</h2>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsDisplay_hz ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsDisplay_hz (!activeCollapsDisplay_hz)}><h2>Display_hz</h2><img src={activeCollapsDisplay_hz ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsDisplay_hz ? "content activeContent" : "content"}></div>   
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Display_hz))).map((Display_hz) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Display_hz}
                            checked={selectedDisplay_hz.includes(Display_hz)}
                            onChange={() => handleCheckboxChange('Display_hz', Display_hz, setSelectedDisplay_hz)}
                        />
                        {Display_hz}
                    </li>
                </ul>
                </label>   
            ))}
            <h2>Display_hz</h2>
        <input onChange={(event) => setValue(event.target.value)}/>
        <button class={activeCollapsVideocard ? "collapsible active" : "collapsible"} onClick={() => setActiveCollapsVideocard (!activeCollapsVideocard)}><h2>Videocard</h2><img src={activeCollapsVideocard ? opened_pointer : closed_pointer} /></button>
        <div class={activeCollapsVideocard ? "content activeContent" : "content"}></div>
            <h2>Videocard</h2>
            {Array.from(new Set(msiLaptops.map((item) => item.characteristic.Videocard))).map((Videocard) => (
                <label><ul>
                    <li>
                        <input
                            type="checkbox"
                            value={Display_hz}
                            checked={selectedVideocard.includes(Videocard)}
                            onChange={() => handleCheckboxChange('Videocard', Videocard, setSelectedVideocard)}
                        />
                        {Videocard}
                    </li>
                </ul>

                </label>
            ))}
            <h2>Videocard</h2>
            {/* {filteredLaptops.map((laptop) => <div>
                <li key={laptop.id}>
                    <div>{laptop.name}</div>
                    <img src={laptop.image} alt={laptop.name} style={{ width: '100px', height: '100px' }} />
                </li>

            </div>)} */}
        </div>

    )
}
export default Laptops
